{"version":3,"sources":["components/notes/notes_list.component.tsx","components/notes/notes_editor.component.tsx","models/Note.ts","data/datasource.ts","data/data_controller.ts","components/notes/notes.layout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["NotesList","_ref","notes","onDelete","onSelect","selectedId","React","createElement","List","className","itemLayout","dataSource","renderItem","note","index","Item","style","background","id","key","actions","DeleteOutlined","cursor","onClick","e","stopPropagation","Meta","title","createdAt","toUTCString","description","concat","plainText","slice","NotesEditor","onSave","editorRef","useRef","messageApi","contextHolder","message","useMessage","Editor","tinymceScriptSrc","process","onInit","evt","editor","current","initialValue","displayText","init","width","menubar","branding","promotion","plugins","toolbar","content_style","Button","type","saveMessage","error","undefined","_editorRef$current","count","wordcount","body","getCharacterCount","open","content","getContent","format","Note","constructor","this","uuid","Date","setDisplayText","text","setPlainText","selectNotes","_localStorage$getItem","dataString","localStorage","getItem","JSON","parse","map","d","saveToLocalStorage","newDataString","stringify","setItem","datasource","currentNotes","push","filtered","filter","n","length","updateNote","noteToUpdate","find","filteredNotes","sortByDate","n1","n2","getTime","NotesLayout","setNotes","useState","selectedNote","setSelectedNote","searchTerm","setSearchTerm","useEffect","refreshNotes","newNotes","Fuse","isCaseSensitive","includeScore","keys","search","r","item","getNotes","data","sort","Input","placeholder","value","onChange","target","onNewNote","noteId","deleteNote","createdNote","createNote","App","Divider","margin","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.1ee4f0f6.chunk.js","sourcesContent":["import React from \"react\";\nimport { Note } from \"../../models/Note\";\nimport { List, } from \"antd\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\n\nexport const NotesList = ({\n  notes,\n  onDelete,\n  onSelect,\n  selectedId,\n}: {\n  notes: Note[];\n  onDelete: (id: string) => void;\n  onSelect: (id: string) => void;\n  selectedId: string | undefined;\n}) => {\n  return (\n    <List\n      className=\"noteListContainer\"\n      itemLayout=\"horizontal\"\n      dataSource={notes}\n      renderItem={(note, index) => {\n        return (\n          <List.Item\n          style={{background: note.id === selectedId ? '#F1F1F1' : '#FFFFFF'}}\n            key={note.id}\n            actions={[\n              <DeleteOutlined\n                style={{ cursor: \"grab/pointer\" }}\n                onClick={(e) => {\n                  e.stopPropagation();\n                  onDelete(note.id)}\n                }\n              />,\n            ]}\n            onClick={() => onSelect(note.id)}\n          >\n            <List.Item.Meta\n              title={note.createdAt.toUTCString()}\n              description={`${note.plainText.slice(0, 15)}...`}\n            />\n          </List.Item>\n        );\n      }}\n    />\n  );\n};\n","import React, { useRef, MutableRefObject } from \"react\";\nimport { Editor } from \"@tinymce/tinymce-react\";\nimport { Note } from \"../../models/Note\";\nimport { Button, message } from \"antd\";\n\nexport const NotesEditor = ({\n  note,\n  onSave,\n}: {\n  note?: Note;\n  onSave: (params: {\n    id: string | undefined;\n    plainText: string;\n    displayText: string;\n  }) => boolean;\n}) => {\n  const editorRef: MutableRefObject<Editor | null> = useRef<Editor>(null);\n  const [messageApi, contextHolder] = message.useMessage();\n\n  const saveMessage = () => {\n    let error = undefined;\n    if (editorRef.current) {\n      //@ts-ignore\n      const count = editorRef?.current?.plugins.wordcount.body.getCharacterCount();\n\n      if (count < 20) {\n        error = `Notes require a minimum of 20 characters`;\n      }\n      if (count > 300) {\n        error = `Note exceeds the 300 max character count `;\n      }\n    } else {\n      error = `Notes application failed to load, please refresh the page`;\n    }\n\n    if (error) {\n      message.open({ type: \"error\", content: error });\n    } else {\n      //@ts-ignore\n      onSave(\n        {\n          id: note?.id,\n          //@ts-ignore\n          plainText: editorRef.current.getContent({ format: \"text\" }),\n          //@ts-ignore\n          displayText: editorRef.current.getContent(),\n        }\n      );\n      message.open({ type: \"success\", content: \"Note successfully saved\" });\n    }\n  };\n\n  return (\n    <div className=\"notesEditorContainer\">\n      <Editor\n        tinymceScriptSrc={process.env.PUBLIC_URL + \"/tinymce/tinymce.min.js\"}\n        onInit={(evt, editor) => {\n          (editorRef.current as unknown) = editor;\n        }}\n        initialValue={note ? note.displayText : \"...type your note here...\"}\n        init={{\n          // height: 500,\n          width: \"60vw\",\n          menubar: false,\n          // setup(editor) {\n          // editor.on(\"keyup\", (event) => {\n          //@ts-ignore\n          // var numChars = editorRef?.current?.plugins.wordcount.body.getCharacterCount();\n          // });\n\n          // },\n          branding: false,\n          promotion: false,\n          plugins:\n            \"advlist autolink lists link image charmap print preview anchor insertdatetime media table paste code help wordcount visualchars\",\n          toolbar:\n            \"undo redo | formatselect | \" +\n            \"bold italic backcolor | alignleft aligncenter \" +\n            \"alignright alignjustify | bullist numlist outdent indent | \" +\n            \"removeformat | help\",\n          content_style:\n            \"body { font-family:Helvetica,Arial,sans-serif; font-size:14px }\",\n        }}\n      />\n      <Button type=\"primary\" onClick={saveMessage}>\n        Save\n      </Button>\n    </div>\n  );\n};\n\n","import { v4 as uuid } from \"uuid\";\n\nexport class Note {\n  id: string;\n  /**\n   * The plain text of a note\n   */\n  plainText: string;\n  /**\n   * The rich text content of the note containing HTML formatting\n   */\n  displayText: string;\n  createdAt: Date;\n\n  constructor({\n    plainText,\n    displayText,\n  }: {\n    plainText: string;\n    displayText: string;\n  }) {\n    this.id = uuid();\n    this.plainText = plainText;\n    this.displayText = displayText;\n    this.createdAt = new Date();\n  }\n\n  setDisplayText(text: string) {\n    this.displayText = this.displayText;\n  }\n\n  setPlainText(text: string) {\n    this.plainText = text;\n  }\n}\n","import { Note } from \"../models/Note\";\n\nconst key = \"notes_app\";\n\nconst selectNotes = (): Note[] => {\n  const dataString = localStorage.getItem(key) ?? \"[]\";\n\n  //todo serialize date better\n  const notes = (JSON.parse(dataString) as Note[]).map((d) => {\n    d.createdAt = new Date(Date.parse(d.createdAt as unknown as string));\n    return d;\n  });\n\n  return notes;\n};\n\nconst createNote = (note: Note) => {\n  const currentNotes = selectNotes();\n  currentNotes.push(note);\n  saveToLocalStorage(currentNotes);\n};\n/**\n *\n * @param id - Unique id for a note\n * @returns true if the element was deleted, false otherwise\n */\nconst deleteNote = (id: string) => {\n  const currentNotes = selectNotes();\n  const filtered = currentNotes.filter((n) => n.id !== id);\n  saveToLocalStorage(filtered);\n  return filtered.length !== currentNotes.length;\n};\n\n/**\n * Probably faster to simply pass in the whole note object and create a \"new\" one to\n * replace it\n */\nconst updateNote = (id: string, plainText: string, displayText: string) => {\n  const currentNotes = selectNotes();\n  const noteToUpdate = currentNotes.find((n) => n.id === id)!;\n  const filteredNotes = currentNotes.filter((n) => n.id !== id);\n  noteToUpdate.displayText = displayText;\n  noteToUpdate.plainText = plainText;\n\n  saveToLocalStorage([...filteredNotes, noteToUpdate]);\n};\n\nconst saveToLocalStorage = (notes: Note[]) => {\n  const newDataString = JSON.stringify(notes);\n  localStorage.setItem(key, newDataString);\n};\n\nexport const datasource = { selectNotes, createNote, deleteNote, updateNote };\n","import { Note } from \"../models/Note\";\nimport { datasource } from \"./datasource\";\n\nconst sortByDate = (n1: Note, n2: Note) =>\n  n2.createdAt.getTime() - n1.createdAt.getTime();\n\nexport const createNote = ({plainText, displayText}: {plainText: string, displayText: string}) => {\n  const note = new Note({plainText, displayText});\n  datasource.createNote(note);\n  return note;\n};\n\nexport const getNotes = (): Note[] => {\n  const data = datasource.selectNotes();\n\n  data.sort(sortByDate);\n  return data;\n};\n\nexport const deleteNote = (id: string) => {\n  datasource.deleteNote(id);\n};\n\nexport const updateNote = (\n  id: string,\n  plainText: string,\n  displayText: string\n) => {\n  datasource.updateNote(id, plainText, displayText);\n};\n","import React, { useEffect, useState } from \"react\";\nimport { NotesList } from \"./notes_list.component\";\nimport { NotesEditor } from \"./notes_editor.component\";\nimport { Note } from \"../../models/Note\";\nimport {\n  getNotes,\n  deleteNote,\n  createNote,\n  updateNote,\n} from \"../../data/data_controller\";\nimport Fuse from \"fuse.js\";\nimport { Button, Input } from \"antd\";\n\nexport const NotesLayout = () => {\n  const [notes, setNotes] = useState<Note[]>([]);\n  const [selectedNote, setSelectedNote] = useState<Note>();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  useEffect(() => {\n    const notes = refreshNotes();\n    setNotes(notes);\n    setSelectedNote(notes[0]);\n  }, []);\n\n  useEffect(() => {\n    let newNotes: Note[];\n    if (searchTerm.length) {\n      const fuse = new Fuse(notes, {\n        isCaseSensitive: true,\n        includeScore: false,\n        keys: [\"displayText\"],\n      });\n      newNotes = fuse.search(searchTerm).map((r) => r.item);\n    } else {\n      newNotes = refreshNotes();\n    }\n    setNotes(newNotes);\n    setSelectedNote(newNotes[0]);\n  }, [searchTerm]);\n\n  const onNewNote = () => {\n    setSelectedNote(undefined);\n  };\n\n  const refreshNotes = () => {\n    const n = getNotes();\n    setNotes(n);\n    return n;\n  };\n\n  const onDeleteNote = (noteId: string) => {\n    deleteNote(noteId);\n    const n = refreshNotes();\n    setSelectedNote(n[0]);\n  };\n\n  const onSaveNote = ({\n    id,\n    plainText,\n    displayText,\n  }: {\n    id: string | undefined;\n    plainText: string;\n    displayText: string;\n  }) => {\n    if (id) {\n      updateNote(id, plainText, displayText);\n    } else {\n      const createdNote = createNote({plainText, displayText });\n      setSelectedNote(createdNote);\n    }\n    refreshNotes();\n    return true;\n  };\n\n  const onSelectNote = (id: string) => {\n    const note = notes.find((note) => note.id === id);\n    setSelectedNote(note);\n  };\n\n  return (\n    <div className=\"notesLayout\">\n      <div id=\"sidebar_container\" className=\"leftContainer\">\n        <Input\n          placeholder={\" Notes...\"}\n          value={searchTerm}\n          onChange={(e) => setSearchTerm(e.target.value)}\n        />\n        <Button style={{ width: \"100%\" }} type=\"primary\" onClick={onNewNote}>\n          + New Note\n        </Button>\n        <NotesList\n          selectedId={selectedNote?.id}\n          notes={notes}\n          onDelete={onDeleteNote}\n          onSelect={onSelectNote}\n        />\n      </div>\n      <NotesEditor note={selectedNote} onSave={onSaveNote} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport { NotesLayout } from \"./components/notes/notes.layout\";\nimport { Divider } from \"antd\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        Notes Application<Divider style={{margin: '5px 0px 0px 0px'}}/>\n      </div>\n      <NotesLayout />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}